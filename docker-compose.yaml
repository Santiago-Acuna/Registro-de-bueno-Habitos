version: '3.8'

services:
  python_server_app:
    build: .
    container_name: python_sever_app
    env_file:
      - .env
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"  # Mapea el puerto del contenedor al host
    networks:
      - backend_network
    depends_on:
      - habits_postgres  # Asegura que PostgreSQL esté levantado antes de iniciar la app
    
  habits_postgres:
    image: postgres:16.4-alpine3.20
    container_name:  habits_postgres
    env_file:
      - .env
    # This line maps container ports to host machine ports.
    # "${DATABASE_PORT}" is replaced with the actual environment variable value.
    ports:
      - "${DATABASE_PORT}:${DATABASE_PORT}"

    # This section defines environment variables specific to this service.
    # These likely contain database credentials and configuration.
    environment:
      POSTGRES_DB: "${DATABASE_NAME}"
      POSTGRES_USER: "${DATABASE_USER}"
      POSTGRES_PASSWORD: "${DATABASE_PASSWORD}"

    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistencia de datos en un volumen
    networks:
      - backend_network

  gui:
    build:
      context: ./GUI  # Ubicación del Dockerfile de Electron
    container_name: electron_gui
    depends_on:
      - python_server_app  # La GUI depende del servidor Python
    # networks:
    #   - backend_network
    environment:
      - PYTHON_SERVER_URL=http://app:${SERVER_PORT}
      - DISPLAY=${DISPLAY}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix
    cap_add:
      - SYS_ADMIN
    network_mode: host
    devices:
      - /dev/fuse
      - /dev/dri:/dev/dri

volumes:
  postgres_data:

networks:
  # This defines a default network named "default" with the bridge driver.
  backend_network:
    driver: bridge